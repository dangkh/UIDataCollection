# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow3.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
from createSub import createSub_Dialog
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import random
import json

from createSampleDialog import Sample_Dialog
from ReceiveAndPlot import *
from multi import *
import csv

from detailSamDialog import *


class Ui_MainWindow(QMainWindow):
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1494, 866)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1481, 571))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.subjectWidget = QtWidgets.QWidget(self.horizontalLayoutWidget)
        self.subjectWidget.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.subjectWidget.setObjectName("subjectWidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.subjectWidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(140, 50, 481, 251))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout.addLayout(self.gridLayout)
        # spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        # self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.prevSub = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.prevSub.setObjectName("prevSub")
        self.horizontalLayout_2.addWidget(self.prevSub)
        self.nextSub = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.nextSub.setObjectName("nextSub")
        self.horizontalLayout_2.addWidget(self.nextSub)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.newSub = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.newSub.setObjectName("newSub")
        self.horizontalLayout_2.addWidget(self.newSub)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout.addWidget(self.subjectWidget)
        self.sampleWidget = QtWidgets.QWidget(self.horizontalLayoutWidget)
        self.sampleWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.sampleWidget.setObjectName("sampleWidget")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.sampleWidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(30, 60, 481, 251))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalSample = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalSample.setContentsMargins(0, 0, 0, 0)
        self.verticalSample.setObjectName("verticalSample")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_2.setObjectName("label_2")
        font = QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.verticalSample.addWidget(self.label_2, 0, QtCore.Qt.AlignHCenter)
        self.gridLayout_sample = QtWidgets.QGridLayout()
        self.gridLayout_sample.setObjectName("gridLayout_sample")
        self.verticalSample.addLayout(self.gridLayout_sample)
        self.horizontalLayout_sample = QtWidgets.QHBoxLayout()
        self.horizontalLayout_sample.setObjectName("horizontalLayout_sample")
        self.prevSam = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.prevSam.setObjectName("prevSam")
        self.horizontalLayout_sample.addWidget(self.prevSam)
        self.nextSam = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.nextSam.setObjectName("nextSam")
        self.horizontalLayout_sample.addWidget(self.nextSam)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_sample.addItem(spacerItem3)
        self.newSam = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.newSam.setObjectName("newSam")

        # addIcon = QtGui.QIcon()
        # addIcon.addPixmap(QtGui.QPixmap("addIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        # self.newSam.setIcon(addIcon)
        # self.newSam.setIconSize(QtCore.QSize(50, 50))

        self.horizontalLayout_sample.addWidget(self.newSam)
        self.verticalSample.addLayout(self.horizontalLayout_sample)
        self.horizontalLayout.addWidget(self.sampleWidget)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(470, 610, 91, 71))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1494, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setNativeMenuBar(False)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1307, 21))
        self.menubar.setObjectName(" menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName(" menuFile")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName(" menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName(" statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenFile = QtWidgets.QAction(MainWindow)
        self.actionOpenFile.setObjectName(" actionOpenFile")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName(" actionQuit")
        self.menuFile.addAction(self.actionOpenFile)
        self.menuFile.addAction(self.actionQuit)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.subjectWidget.setLayout(self.verticalLayout)
        self.sampleWidget.setLayout(self.verticalSample)

        self.createEvent()

    def createEvent(self):
        self.numItem = 16
        self.currentSub = ""
        self.currentPage = 0
        self.currentSamPage = 0
        self.storeDir = "./DataVIN/"
        self.record_save = True
        self.counter = 0
        self.newSam.hide()
        self.prevSub.hide()
        self.prevSam.hide()
        self.nextSam.hide()
        self.nextSub.hide()

        self.updateSub()

        self.updateSam(listDir=-1)

        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        widget = QtWidgets.QWidget()
        widget.setLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(widget)
        self.newSam.clicked.connect(self.newSample)
        self.newSub.clicked.connect(self.newSubject)
        self.prevSub.clicked.connect(self.prevSubAction)
        self.nextSub.clicked.connect(self.nextSubAction)
        self.prevSam.clicked.connect(self.prevSamAction)
        self.nextSam.clicked.connect(self.nextSamAction)

        self.actionQuit.setShortcut("Ctrl+Q")
        self.actionQuit.triggered.connect(self.closeEvent)
        self.actionOpenFile.setShortcut("Ctrl+O")
        self.actionOpenFile.setStatusTip('Open file browser')
        self.actionOpenFile.triggered.connect(self.openFilePath)

    def updateSub(self, listDir=[], page=0):
        self.listSub = []
        self.listDirSub = readStorageData(self.storeDir)
        # print(self.listDirSub)
        self.numPage = len(self.listDirSub) // self.numItem
        if len(self.listDirSub) % self.numItem == 0:
            self.numPage -= 1
        if len(self.listDirSub) > self.numItem:
            self.prevSub.show()
            self.nextSub.show()
        self.currentPage = page
        if page == -1:
            self.currentPage = self.numPage

        counter = 0
        showDir = self.listDirSub[self.currentPage * self.numItem:self.currentPage * self.numItem + self.numItem]
        for x in range(4):
            for y in range(4):
                newSubject = QtWidgets.QWidget()
                newSubject.setObjectName("newSubject" + str(x) + str(y))
                subInfo = QtWidgets.QVBoxLayout(newSubject)
                subInfo.setContentsMargins(0, 0, 0, 0)
                subInfo.setObjectName("subInfo" + str(x) + str(y))
                subBtn = QtWidgets.QPushButton(newSubject)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(subBtn.sizePolicy().hasHeightForWidth())
                subBtn.setSizePolicy(sizePolicy)
                subBtn.setStyleSheet("background-color: rgba(255,255,255,0);border: 0px;")
                subBtn.setText("")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("folder-blue-512.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                subBtn.setIcon(icon)
                subBtn.setIconSize(QtCore.QSize(50, 50))
                subBtn.setObjectName("subBtn" + str(x) + str(y))
                subInfo.addWidget(subBtn)
                subLabel = QtWidgets.QLabel(newSubject)
                subLabel.setObjectName("subLabel" + str(x) + str(y))
                subLabel.setText("")
                subInfo.addWidget(subLabel, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                subInfo.setStretch(0, 4)
                subInfo.setStretch(1, 1)
                subDict = {
                    'subject': newSubject,
                    'Info': subInfo,
                    'Btn': subBtn,
                    'Label': subLabel,
                    'pos': [x, y],
                    'dir': ""
                }
                self.listSub.append(subDict)
                self.gridLayout.addWidget(newSubject, x, y)
                if counter >= len(showDir):
                    newSubject.setEnabled(False)
                else:
                    subLabel.setText(str(showDir[counter]))
                    self.listSub[counter]['dir'] = showDir[counter]
                counter += 1

        for x in self.listSub:
            x['Btn'].clicked.connect(self.updateSamVisual(x))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HMIlab"))
        self.label.setText(_translate("MainWindow", "Danh sách người bệnh"))
        self.prevSub.setText(_translate("MainWindow", "Previous"))
        self.nextSub.setText(_translate("MainWindow", "Next"))
        self.newSub.setText(_translate("MainWindow", "New Patient"))
        self.label_2.setText(_translate("MainWindow", "Danh sách bản ghi"))
        self.prevSam.setText(_translate("MainWindow", "Previous"))
        self.nextSam.setText(_translate("MainWindow", "Next"))
        self.newSam.setText(_translate("MainWindow", "New Record"))
        self.menuFile.setTitle(_translate("MainWindow", " File"))
        self.menuAbout.setTitle(_translate("MainWindow", " About"))
        self.actionOpenFile.setText(_translate("MainWindow", " OpenFile"))
        self.actionQuit.setText(_translate("MainWindow", " Quit"))

    def newSubject(self):
        self.createSubdialog = createSub(self)
        self.createSubdialog.ui.saveBtn.clicked.connect(self.createNewSub)
        self.createSubdialog.exec_()

    def createNewSub(self):
        name = self.createSubdialog.ui.NameEdit.text()
        age = self.createSubdialog.ui.AgeEdit.value()
        genderG = self.createSubdialog.ui.FemaleEdit.isChecked()
        genderM = self.createSubdialog.ui.MaleEdit.isChecked()
        patientDesc = self.createSubdialog.ui.DiseaseDescEdit.toPlainText()
        patientStt = self.createSubdialog.ui.spinBox.text()

        missingValue = False
        if name == '' or patientDesc == '' or patientStt == '':
            missingValue = True
        elif not genderG and not genderM:
            missingValue = True
        elif age == 0:
            missingValue = True

        if not missingValue:
            gender = "M"
            if genderG:
                gender = "Fm"
            recordID = random.randint(1, 100)
            js = {
                'id': recordID,
                'name': name,
                'age': age,
                'gender': gender,
                'patientDesc': patientDesc,
                'patientStt': patientStt,
            }
            newlink = './dataVIN/' + "_" + str(name) + "_" + str(recordID)
            os.mkdir(newlink)
            fileName = newlink + '/' + 'info.json'
            with open(fileName, 'w') as outfile:
                json.dump(js, outfile)
            self.createSubdialog.close()
            self.updateSub(page=-1)
        else:
            self.showErrorPopup("Please complete fully the form")

    def newSample(self):
        self.createSamdialog = createSam(self)
        self.createSamdialog.setInfo(self.currentSub)
        self.createSamdialog.ui.fetchInfoBtn.clicked.connect(lambda: self.updateInfoSample(reuse=True))
        self.createSamdialog.ui.resetBtn.clicked.connect(self.updateInfoSample)
        self.createSamdialog.ui.rcdBtn.clicked.connect(self.record_saveData)
        self.createSamdialog.ui.turnOnOffBtn.clicked.connect(self.samForceQuit)

        self.signalTimer = QtCore.QTimer()
        self.signalTimer.setInterval(100)
        self.signalTimer.timeout.connect(self.changeSignal)
        self.signalTimer.start()

        self.EEGPlot = EEGReceive_Plot("new")
        self.createSamdialog.ui.widEEG.addWidget(self.EEGPlot.pw)

        self.ETPlot = ETReceive("new")

        self.update_timer = QtCore.QTimer()
        self.update_timer.setInterval(60)
        self.update_timer.timeout.connect(self.EEGPlot.scroll)
        self.update_timer.start()

        # create a timer that will pull and add new data occasionally
        self.pull_timer = QtCore.QTimer()
        self.pull_timer.setInterval(500)
        self.pull_timer.timeout.connect(self.EEGPlot.update)
        self.pull_timer.start()
        # get ET

        self.ETtimer = QtCore.QTimer()
        self.ETtimer.setInterval(0)
        self.ETtimer.timeout.connect(self.ET_update)
        self.ETtimer.start()

        self.CAMth = VideoRecorder()
        self.CAMth.setLabelImage([self.createSamdialog.ui.CAM1, self.createSamdialog.ui.CAM2])
        self.CAMth.beginRecord()

        self.createSamdialog.ui.exec_()

    def updateSam(self, listDir=0, page=0):
        self.label_2.setText("Danh sách bản ghi" + str(self.currentSub))
        if listDir == -1:
            self.listDirSam = []
        else:
            self.listDirSam = readStorageData(self.currentSub + '/')
        self.currentSamPage = page
        self.numSamPage = len(self.listDirSam) // self.numItem
        counter = 0

        if len(self.listDirSam) % self.numItem == 0:
            self.numSamPage -= 1
        if len(self.listDirSam) > self.numItem:
            self.prevSam.show()
            self.nextSam.show()
        else:
            self.prevSam.hide()
            self.nextSam.hide()
        self.currentSamPage = page
        if page == -1:
            self.currentSamPage = self.numSamPage
        showDirSam = self.listDirSam[
            self.currentSamPage * self.numItem:self.currentSamPage * self.numItem + self.numItem]
        # print(showDirSam)
        self.listSam = []
        for x in range(4):
            for y in range(4):
                newSam = QtWidgets.QWidget()
                newSam.setObjectName("newSample" + str(x) + str(y))
                samInfo = QtWidgets.QVBoxLayout(newSam)
                samInfo.setContentsMargins(0, 0, 0, 0)
                samInfo.setObjectName("samInfo" + str(x) + str(y))
                samBtn = QtWidgets.QPushButton(newSam)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(samBtn.sizePolicy().hasHeightForWidth())
                samBtn.setSizePolicy(sizePolicy)
                samBtn.setStyleSheet("background-color: rgba(255,255,255,0);border: 0px;")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("mfiles.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                icon2 = QtGui.QIcon()
                icon2.addPixmap(QtGui.QPixmap("file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                samBtn.setObjectName("samBtn" + str(x) + str(y))
                samInfo.addWidget(samBtn)
                samLabel = QtWidgets.QLabel(newSam)
                samLabel.setObjectName("samLabel" + str(x) + str(y))
                samLabel.setText("")
                samInfo.addWidget(samLabel, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                samInfo.setStretch(0, 4)
                samInfo.setStretch(1, 1)
                self.gridLayout_sample.addWidget(newSam, x, y)
                samDict = {
                    'subject': newSam,
                    'Info': samInfo,
                    'Btn': samBtn,
                    'Label': samLabel,
                    'pos': [x, y],
                    'dir': ""
                }
                self.listSam.append(samDict)
                if counter >= len(showDirSam):
                    newSam.setEnabled(False)
                    samBtn.setIcon(icon2)
                else:
                    samLabel.setText(str(showDirSam[counter]))
                    samBtn.setIcon(icon1)
                    samBtn.setIconSize(QtCore.QSize(50, 50))
                    self.listSam[counter]["dir"] = showDirSam[counter]
                counter += 1

        for x in self.listSam:
            x['Btn'].clicked.connect(self.visualSamdetail(x))

    def updateSamVisual(self, arg):
        def wrap():
            link = arg['dir']
            self.currentSub = link
            if os.path.isdir(link):
                onlydir = [link + "/" + d for d in os.listdir(link) if os.path.isdir(link + "/" + d)]
            else:
                print("Error in link Sub")
            onlydir.sort(key=os.path.getctime)
            self.updateSam()
            self.newSam.show()
        return wrap

    def chooseViewSam(self, error, link):
        buttonReply = QMessageBox.question(self, 'Visual Sample', "Do you want view detail?",
                                           QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if buttonReply == QMessageBox.Yes:
            print('Yes clicked.')
            self.visualSam(link)
        else:
            print('No clicked.')

    def visualSam(self, link):
        print(link)
        import os
        path = os.path.realpath(link)
        os.startfile(path)
        # self.samDetail = createViewSam(self)
        # self.samDetail.setInfo(link)
        # self.samDetail.ui.exec_()

    def visualSamdetail(self, arg):
        # TODO
        def wrap():
            link = arg['dir']
            self.chooseViewSam("Do you want to view Sample detail at ", link)
        return wrap

    def showErrorPopup(self, error):
        msg = QtWidgets.QMessageBox()
        msg.setText(str(error))
        msg.exec_()

    def prevSubAction(self):
        newPage = self.currentPage - 1
        newPage = max(0, newPage)
        self.updateSub(page=newPage)

    def nextSubAction(self):
        newPage = self.currentPage + 1
        newPage = min(newPage, self.numPage)
        self.updateSub(page=newPage)

    def prevSamAction(self):
        newPage = self.currentSamPage - 1
        newPage = max(0, newPage)
        self.updateSam(page=newPage)

    def nextSamAction(self):
        newPage = self.currentSamPage + 1
        newPage = min(newPage, self.numSamPage)
        self.updateSam(page=newPage)

    def closeEvent(self, event):
        print("exit")
        QApplication.quit()

    def openFilePath(self):
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.Directory)
        if dlg.exec_():
            filenames = dlg.selectedFiles()
        path = filenames[0]
        if path == "" or path is None:
            return
        self.storeDir = path + '/'
        self.currentSub = ""
        self.updateSub()

        self.updateSam(listDir=-1)

    def updateInfoSample(self, reuse=False):
        if not reuse:
            newData = {
                'RecorderEdit': "",
                'LocateEdit': "",
                'RecPlanEdit': 0,
                'sentenceIdEdit': 0
            }
            self.createSamdialog.setRecodData(newData)
        else:
            print("ENterrrrrrrrrrrrrrrrrrrr")
            onlydir = []
            link = self.currentSub + '/'
            if os.path.isdir(link):
                onlydir = [link + d for d in os.listdir(link) if os.path.isdir(link + d)]
            onlydir.sort(key=os.path.getctime)
            if len(onlydir) == 0:
                # pop
                return
            lastDir = onlydir[-1] + '/plan.json'
            print(lastDir)
            with open(lastDir) as json_file:
                data = json.load(json_file)
            self.createSamdialog.setRecodData(data)

    def samForceQuit(self):
        timers = [self.update_timer, self.pull_timer, self.signalTimer]
        for t in timers:
            t.stop()
            t.deleteLater()
        self.CAMth.stopRecord()
        self.createSamdialog.ui.forceQuit()

    def record_saveData(self):
        if self.record_save:
            self.createRecord()
            return
        self.saveRecord()

    def createRecord(self):
        print("Enter Record")

        RecorderEdit = self.createSamdialog.ui.RecorderEdit.text()
        LocateEdit = self.createSamdialog.ui.LocateEdit.text()
        RecPlanEdit = self.createSamdialog.ui.RecPlanEdit.value()
        sentenceIdEdit = self.createSamdialog.ui.sentenceIdEdit.value()
        missingValue = False
        if RecorderEdit == '' or LocateEdit == '':
            missingValue = True
        if RecPlanEdit == 0 or sentenceIdEdit == 0:
            missingValue = True

        if not missingValue:
            self.record_save = False
            self.createSamdialog.ui.recordingStt = True
            # create new sample folder
            link = self.currentSub + '/'
            if os.path.isdir(link):
                onlydir = [link + d for d in os.listdir(link) if os.path.isdir(link + "/" + d)]
            else:
                print("Error in link Sub")
            onlydir.sort(key=os.path.getctime)
            newID = len(onlydir) + 1
            newDir = link + "sample" + str(newID)
            os.mkdir(newDir)
            self.newDir = newDir
            self.CAMth.updateSavingDir(newDir + '/')
            self.ETPlot.updateSaving()

            self.EEGRcv = EEGReceive("new")
            self.EEGtimer = QtCore.QTimer()
            self.EEGtimer.setInterval(0)
            self.EEGtimer.timeout.connect(self.EEGRcv.update)
            self.EEGtimer.start()

            self.createSamdialog.ui.rcdBtn.setText("Save")
            timers = [self.update_timer, self.pull_timer]
            for t in timers:
                t.stop()
                t.deleteLater()
        else:
            self.showErrorPopup("Please complete fully the form")

    def testEnter(self):
        print("pass")

    def saveRecord(self):
        print("Enter Save")

        RecorderEdit = self.createSamdialog.ui.RecorderEdit.text()
        LocateEdit = self.createSamdialog.ui.LocateEdit.text()
        RecPlanEdit = self.createSamdialog.ui.RecPlanEdit.value()
        sentenceIdEdit = self.createSamdialog.ui.sentenceIdEdit.value()
        newData = {
            'RecorderEdit': RecorderEdit,
            'LocateEdit': LocateEdit,
            'RecPlanEdit': RecPlanEdit,
            'sentenceIdEdit': sentenceIdEdit
        }
        self.record_save = True
        self.createSamdialog.ui.widEEG.removeWidget(self.EEGPlot.pw)
        timers = [self.ETtimer, self.signalTimer, self.EEGtimer]
        for t in timers:
            t.stop()
            t.deleteLater()
        newDir = self.newDir
        self.CAMth.stopRecord()

        fileName = newDir + '/' + 'plan.json'
        with open(fileName, 'w') as outfile:
            json.dump(newData, outfile)

        list_ET = self.ETPlot.getSavingData()
        fileNameET = newDir + '/' + 'ET.csv'
        with open(fileNameET, mode='w', newline='', encoding='utf-8') as ETfile:
            fieldnames = ['Data', 'TimeStamp']
            et_writer = csv.writer(ETfile)
            et_writer.writerow(fieldnames)
            print(len(list_ET[0]))
            for idx in range(len(list_ET[0])):
                et_writer.writerow([list_ET[0][idx], list_ET[1][idx]])

        fileNameEEG = newDir + '/' + 'EEG.csv'
        listEEG = self.EEGRcv.getSavingData()
        headFiles = self.EEGRcv.getInfo()

        with open(fileNameEEG, mode='w', newline='') as EEGfile:
            eeg_writer = csv.writer(EEGfile)
            eeg_writer.writerow(headFiles)
            for idx in range(len(listEEG[0])):
                eeg_writer.writerow(listEEG[0][idx])

        self.createSamdialog.ui.recordingStt = False
        self.createSamdialog.close()
        self.updateSam(page=-1)

    def ET_update(self):
        self.ETPlot.update()
        ETdata = self.ETPlot.listDataET[-1]
        s1, s2, s3 = ETdata[0].split(":")
        x, y, _ = s1[1:-1].split(",")

        self.createSamdialog.ui.position.setText(str(x) + " " + str(y))
        self.createSamdialog.ui.character.setText(str(s2))
        self.createSamdialog.ui.widScreen.setText(str(s3))

    def changeSignal(self):
        counter = 0
        cam1 = True
        cam2 = True
        # print(self.CAMth.numberDevices)
        if self.CAMth.numberDevices < 2:
            cam2 = False
        if self.CAMth.numberDevices < 1:
            cam1 = False
        l1 = [self.ETPlot.signalStt(), self.EEGPlot.signalStt(), cam1, cam2]
        print(l1)
        l2 = [self.createSamdialog.ui.SignalET, self.createSamdialog.ui.SignalEEG,
              self.createSamdialog.ui.SignalCAM1, self.createSamdialog.ui.SignalCAM2]
        # print(l1)
        for x in l1:
            if x:
                counter += 1
        if counter >= 0:
            self.createSamdialog.ui.rcdBtn.show()
        else:
            self.createSamdialog.ui.rcdBtn.hide()
        for x, y in zip(l1, l2):
            y.setChecked(not x)


def readStorageData(link="./DataVIN/"):
    onlydir = []
    if os.path.isdir(link):
        onlydir = [link + d for d in os.listdir(link) if os.path.isdir(link + d)]
        onlydir.sort(key=os.path.getctime)
    else:
        print("imported link is not exist")
        print("DataVIN folder is created, run again!")
        os.mkdir(link)
    return onlydir


class createSub(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = createSub_Dialog()
        self.ui.setupUi(self)


class createViewSam(QDialog):
    """docstring for createViewSam"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = detailSam_Dialog()
        self.ui.setupUi()

    def setInfo(self, link):
        self.ui.label_2.setText("Bản ghi: " + str(link))
        listVisual = ["ET", "EEG", "CAM", "Info"]
        # listVisual TODO
        counter = 0
        for idx, x in enumerate(listVisual):

            newSubject = QtWidgets.QWidget()
            newSubject.setObjectName("newSubject"+ str(x))
            viewInfo = QtWidgets.QVBoxLayout(newSubject)
            viewInfo.setContentsMargins(0, 0, 0, 0)
            viewInfo.setObjectName("subInfo" + str(x))
            viewBtn = QtWidgets.QPushButton(newSubject)
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(viewBtn.sizePolicy().hasHeightForWidth())
            viewBtn.setSizePolicy(sizePolicy)
            viewBtn.setStyleSheet("background-color: rgba(255,255,255,0);border: 0px;")
            viewBtn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            viewBtn.setIcon(icon)
            viewBtn.setIconSize(QtCore.QSize(50, 50))
            viewBtn.setObjectName("subBtn" + str(x))
            viewInfo.addWidget(viewBtn)
            viewLabel = QtWidgets.QLabel(newSubject)
            viewLabel.setObjectName("subLabel" + str(x))
            viewLabel.setText("")
            viewInfo.addWidget(viewLabel, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            viewInfo.setStretch(0, 4)
            viewInfo.setStretch(1, 1)
            # subDict = {
            #     'subject': newSubject,
            #     'Info': subInfo,
            #     'Btn': subBtn,
            #     'Label': subLabel,
            #     'pos': [x, y],
            #     'dir': ""
            # }
            # self.listSub.append(subDict)
            self.ui.gridLayout_sample.addWidget(newSubject, 0, idx)
            viewLabel.setText(str(x))
            # self.listSub[counter]['dir'] = showDir[counter]
            counter += 1


class createSam(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Sample_Dialog()
        self.ui.setupUi()
        self.turnOnBtn = False
        self.ui.rcdBtn.hide()

    def setInfo(self, info):
        # set sample info as the info of the patient
        self.info = info
        try:
            jsonDir = info + '/info.json'
            with open(jsonDir) as json_file:
                data = json.load(json_file)
            self.ui.NameEdit.setText(data['name'])
            self.ui.AgeEdit.setValue(data['age'])
            if data['gender'] == 'M':
                self.ui.MaleEdit.setChecked(True)
            else:
                self.ui.FemaleEdit.setChecked(True)
            self.ui.DiseaseDescEdit.setText(data['patientDesc'])
            self.ui.spinTTB.setValue(1)

            self.ui.NameEdit.setEnabled(False)
            self.ui.AgeEdit.setEnabled(False)
            self.ui.MaleEdit.setEnabled(False)
            self.ui.FemaleEdit.setEnabled(False)
            self.ui.DiseaseDescEdit.setEnabled(False)
            self.ui.spinTTB.setEnabled(False)
        except Exception as e:
            print("cant find json file, subject dont have required infomation")
            print(e)

    def setRecodData(self, data):
        self.ui.RecorderEdit.setText(data['RecorderEdit'])
        self.ui.LocateEdit.setText(data['LocateEdit'])
        self.ui.RecPlanEdit.setValue(data['RecPlanEdit'])
        self.ui.sentenceIdEdit.setValue(data['sentenceIdEdit'])

    def closeEvent(self, event):
        # event.accept()
        self.ui.closeEvent(event)
        # QApplication.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
